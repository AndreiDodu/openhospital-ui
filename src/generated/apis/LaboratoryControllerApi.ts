// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    LabWithRowsDTO,
    LaboratoryDTO,
    LaboratoryForPrintDTO,
    ResponseEntity,
} from '../models';

export interface DeleteExamUsingDELETE2Request {
    code: number;
}

export interface GetLaboratoryForPrintUsingGETRequest {
    dateFrom: string;
    dateTo: string;
    examName: string;
}

export interface GetLaboratoryUsingGETRequest {
    patId: number;
}

export interface NewLaboratory2UsingPOSTRequest {
    labsWithRows: Array<LabWithRowsDTO>;
}

export interface NewLaboratoryUsingPOSTRequest {
    labWithRowsDTO: LabWithRowsDTO;
}

export interface UpdateLaboratoryUsingPUTRequest {
    code: number;
    labWithRowsDTO: LabWithRowsDTO;
}

/**
 * no description
 */
export class LaboratoryControllerApi extends BaseAPI {

    /**
     * deleteExam
     */
    deleteExamUsingDELETE2 = ({ code }: DeleteExamUsingDELETE2Request): Observable<ResponseEntity> => {
        throwIfNullOrUndefined(code, 'deleteExamUsingDELETE2');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<ResponseEntity>({
            path: '/laboratories/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
            headers,
        });
    };

    /**
     * getLaboratoryForPrint
     */
    getLaboratoryForPrintUsingGET = ({ dateFrom, dateTo, examName }: GetLaboratoryForPrintUsingGETRequest): Observable<Array<LaboratoryForPrintDTO>> => {
        throwIfNullOrUndefined(dateFrom, 'getLaboratoryForPrintUsingGET');
        throwIfNullOrUndefined(dateTo, 'getLaboratoryForPrintUsingGET');
        throwIfNullOrUndefined(examName, 'getLaboratoryForPrintUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'dateFrom': (dateFrom as any).toISOString(),
            'dateTo': (dateTo as any).toISOString(),
            'examName': examName,
        };

        return this.request<Array<LaboratoryForPrintDTO>>({
            path: '/laboratories/exams',
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * getLaboratory
     */
    getLaboratoryUsingGET = ({ patId }: GetLaboratoryUsingGETRequest): Observable<Array<LaboratoryDTO>> => {
        throwIfNullOrUndefined(patId, 'getLaboratoryUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<LaboratoryDTO>>({
            path: '/laboratories/byPatientId/{patId}'.replace('{patId}', encodeURI(patId)),
            method: 'GET',
            headers,
        });
    };

    /**
     * getLaboratory
     */
    getLaboratoryUsingGET1 = (): Observable<Array<LaboratoryDTO>> => {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<LaboratoryDTO>>({
            path: '/laboratories',
            method: 'GET',
            headers,
        });
    };

    /**
     * getMaterials
     */
    getMaterialsUsingGET = (): Observable<Array<string>> => {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<string>>({
            path: '/laboratories/materials',
            method: 'GET',
            headers,
        });
    };

    /**
     * newLaboratory2
     */
    newLaboratory2UsingPOST = ({ labsWithRows }: NewLaboratory2UsingPOSTRequest): Observable<ResponseEntity> => {
        throwIfNullOrUndefined(labsWithRows, 'newLaboratory2UsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<ResponseEntity>({
            path: '/laboratories/insertList',
            method: 'POST',
            headers,
            body: labsWithRows,
        });
    };

    /**
     * newLaboratory
     */
    newLaboratoryUsingPOST = ({ labWithRowsDTO }: NewLaboratoryUsingPOSTRequest): Observable<boolean> => {
        throwIfNullOrUndefined(labWithRowsDTO, 'newLaboratoryUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            path: '/laboratories',
            method: 'POST',
            headers,
            body: labWithRowsDTO,
        });
    };

    /**
     * updateLaboratory
     */
    updateLaboratoryUsingPUT = ({ code, labWithRowsDTO }: UpdateLaboratoryUsingPUTRequest): Observable<ResponseEntity> => {
        throwIfNullOrUndefined(code, 'updateLaboratoryUsingPUT');
        throwIfNullOrUndefined(labWithRowsDTO, 'updateLaboratoryUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<ResponseEntity>({
            path: '/laboratories/{code}'.replace('{code}', encodeURI(code)),
            method: 'PUT',
            headers,
            body: labWithRowsDTO,
        });
    };

}
