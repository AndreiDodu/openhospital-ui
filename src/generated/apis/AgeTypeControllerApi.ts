// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    AgeType,
    AgeTypeDTO,
} from '../models';

export interface GetAgeTypeByIndexUsingGETRequest {
    index: number;
}

export interface GetAgeTypeCodeByAgeUsingGETRequest {
    age: number;
}

export interface UpdateAgeTypeUsingPUTRequest {
    ageTypeDTO: AgeTypeDTO;
}

/**
 * no description
 */
export class AgeTypeControllerApi extends BaseAPI {

    /**
     * getAgeTypeByIndex
     */
    getAgeTypeByIndexUsingGET = ({ index }: GetAgeTypeByIndexUsingGETRequest): Observable<AgeType> => {
        throwIfNullOrUndefined(index, 'getAgeTypeByIndexUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<AgeType>({
            path: '/agetypes/{index}'.replace('{index}', encodeURI(index)),
            method: 'GET',
            headers,
        });
    };

    /**
     * getAgeTypeCodeByAge
     */
    getAgeTypeCodeByAgeUsingGET = ({ age }: GetAgeTypeCodeByAgeUsingGETRequest): Observable<{ [key: string]: string; }> => {
        throwIfNullOrUndefined(age, 'getAgeTypeCodeByAgeUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'age': age,
        };

        return this.request<{ [key: string]: string; }>({
            path: '/agetypes/code',
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * getAllAgeTypes
     */
    getAllAgeTypesUsingGET = (): Observable<Array<AgeTypeDTO>> => {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<AgeTypeDTO>>({
            path: '/agetypes',
            method: 'GET',
            headers,
        });
    };

    /**
     * updateAgeType
     */
    updateAgeTypeUsingPUT = ({ ageTypeDTO }: UpdateAgeTypeUsingPUTRequest): Observable<AgeTypeDTO> => {
        throwIfNullOrUndefined(ageTypeDTO, 'updateAgeTypeUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<AgeTypeDTO>({
            path: '/agetypes',
            method: 'PUT',
            headers,
            body: ageTypeDTO,
        });
    };

}
