// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    ResponseEntity,
    VaccineDTO,
} from '../models';

export interface CheckVaccineCodeUsingGETRequest {
    code: string;
}

export interface DeleteVaccineUsingDELETERequest {
    code: string;
}

export interface GetVaccinesByVaccineTypeCodeUsingGETRequest {
    vaccineTypeCode: string;
}

export interface NewVaccineUsingPOSTRequest {
    newVaccine: VaccineDTO;
}

export interface UpdateVaccineUsingPUTRequest {
    updateVaccine: VaccineDTO;
}

/**
 * no description
 */
export class VaccineControllerApi extends BaseAPI {

    /**
     * checkVaccineCode
     */
    checkVaccineCodeUsingGET = ({ code }: CheckVaccineCodeUsingGETRequest): Observable<boolean> => {
        throwIfNullOrUndefined(code, 'checkVaccineCodeUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            path: '/vaccines/check/{code}'.replace('{code}', encodeURI(code)),
            method: 'GET',
            headers,
        });
    };

    /**
     * deleteVaccine
     */
    deleteVaccineUsingDELETE = ({ code }: DeleteVaccineUsingDELETERequest): Observable<ResponseEntity> => {
        throwIfNullOrUndefined(code, 'deleteVaccineUsingDELETE');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<ResponseEntity>({
            path: '/vaccines/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
            headers,
        });
    };

    /**
     * getVaccinesByVaccineTypeCode
     */
    getVaccinesByVaccineTypeCodeUsingGET = ({ vaccineTypeCode }: GetVaccinesByVaccineTypeCodeUsingGETRequest): Observable<Array<VaccineDTO>> => {
        throwIfNullOrUndefined(vaccineTypeCode, 'getVaccinesByVaccineTypeCodeUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<VaccineDTO>>({
            path: '/vaccines/type-code/{vaccineTypeCode}'.replace('{vaccineTypeCode}', encodeURI(vaccineTypeCode)),
            method: 'GET',
            headers,
        });
    };

    /**
     * getVaccines
     */
    getVaccinesUsingGET = (): Observable<Array<VaccineDTO>> => {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<VaccineDTO>>({
            path: '/vaccines',
            method: 'GET',
            headers,
        });
    };

    /**
     * newVaccine
     */
    newVaccineUsingPOST = ({ newVaccine }: NewVaccineUsingPOSTRequest): Observable<ResponseEntity> => {
        throwIfNullOrUndefined(newVaccine, 'newVaccineUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<ResponseEntity>({
            path: '/vaccines',
            method: 'POST',
            headers,
            body: newVaccine,
        });
    };

    /**
     * updateVaccine
     */
    updateVaccineUsingPUT = ({ updateVaccine }: UpdateVaccineUsingPUTRequest): Observable<ResponseEntity> => {
        throwIfNullOrUndefined(updateVaccine, 'updateVaccineUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<ResponseEntity>({
            path: '/vaccines',
            method: 'PUT',
            headers,
            body: updateVaccine,
        });
    };

}
