// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    AdmissionDTO,
    AdmittedPatientDTO,
} from '../models';

export interface DeleteAdmissionTypeUsingDELETERequest {
    id: number;
}

export interface GetAdmissionsUsingGETRequest {
    id: number;
}

export interface GetAdmittedPatientsUsingGETRequest {
    admissionrange?: string;
    dischargerange?: string;
    searchterms?: string;
}

export interface GetCurrentAdmissionUsingGETRequest {
    patientcode: number;
}

export interface GetNextYProgUsingGETRequest {
    wardcode: string;
}

export interface GetPatientAdmissionsUsingGETRequest {
    patientcode: number;
}

export interface GetUsedWardBedUsingGETRequest {
    wardid: string;
}

export interface NewAdmissionsUsingPOSTRequest {
    newAdmissionDTO: AdmissionDTO;
}

export interface UpdateAdmissionsUsingPUTRequest {
    updAdmissionDTO: AdmissionDTO;
}

/**
 * no description
 */
export class AdmissionControllerApi extends BaseAPI {

    /**
     * deleteAdmissionType
     */
    deleteAdmissionTypeUsingDELETE = ({ id }: DeleteAdmissionTypeUsingDELETERequest): Observable<boolean> => {
        throwIfNullOrUndefined(id, 'deleteAdmissionTypeUsingDELETE');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            path: '/admissions/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        });
    };

    /**
     * getAdmissions
     */
    getAdmissionsUsingGET = ({ id }: GetAdmissionsUsingGETRequest): Observable<AdmissionDTO> => {
        throwIfNullOrUndefined(id, 'getAdmissionsUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<AdmissionDTO>({
            path: '/admissions/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        });
    };

    /**
     * getAdmittedPatients
     */
    getAdmittedPatientsUsingGET = ({ admissionrange, dischargerange, searchterms }: GetAdmittedPatientsUsingGETRequest): Observable<Array<AdmittedPatientDTO>> => {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = {};

        if (admissionrange != null) { query['admissionrange'] = admissionrange; }
        if (dischargerange != null) { query['dischargerange'] = dischargerange; }
        if (searchterms != null) { query['searchterms'] = searchterms; }

        return this.request<Array<AdmittedPatientDTO>>({
            path: '/admissions/admittedPatients',
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * getCurrentAdmission
     */
    getCurrentAdmissionUsingGET = ({ patientcode }: GetCurrentAdmissionUsingGETRequest): Observable<AdmissionDTO> => {
        throwIfNullOrUndefined(patientcode, 'getCurrentAdmissionUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'patientcode': patientcode,
        };

        return this.request<AdmissionDTO>({
            path: '/admissions/current',
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * getNextYProg
     */
    getNextYProgUsingGET = ({ wardcode }: GetNextYProgUsingGETRequest): Observable<number> => {
        throwIfNullOrUndefined(wardcode, 'getNextYProgUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'wardcode': wardcode,
        };

        return this.request<number>({
            path: '/admissions/getNextProgressiveIdInYear',
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * getPatientAdmissions
     */
    getPatientAdmissionsUsingGET = ({ patientcode }: GetPatientAdmissionsUsingGETRequest): Observable<Array<AdmissionDTO>> => {
        throwIfNullOrUndefined(patientcode, 'getPatientAdmissionsUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'patientcode': patientcode,
        };

        return this.request<Array<AdmissionDTO>>({
            path: '/admissions',
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * getUsedWardBed
     */
    getUsedWardBedUsingGET = ({ wardid }: GetUsedWardBedUsingGETRequest): Observable<number> => {
        throwIfNullOrUndefined(wardid, 'getUsedWardBedUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'wardid': wardid,
        };

        return this.request<number>({
            path: '/admissions/getBedsOccupationInWard',
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * newAdmissions
     */
    newAdmissionsUsingPOST = ({ newAdmissionDTO }: NewAdmissionsUsingPOSTRequest): Observable<number> => {
        throwIfNullOrUndefined(newAdmissionDTO, 'newAdmissionsUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<number>({
            path: '/admissions',
            method: 'POST',
            headers,
            body: newAdmissionDTO,
        });
    };

    /**
     * updateAdmissions
     */
    updateAdmissionsUsingPUT = ({ updAdmissionDTO }: UpdateAdmissionsUsingPUTRequest): Observable<number> => {
        throwIfNullOrUndefined(updAdmissionDTO, 'updateAdmissionsUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<number>({
            path: '/admissions',
            method: 'PUT',
            headers,
            body: updAdmissionDTO,
        });
    };

}
