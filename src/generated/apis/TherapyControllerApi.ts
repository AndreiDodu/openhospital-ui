// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    MedicalDTO,
    TherapyDTO,
    TherapyRowDTO,
} from '../models';

export interface DeleteAllTherapiesUsingDELETERequest {
    codePatient: number;
}

export interface GetMedicalsOutOfStockUsingPOSTRequest {
    therapyDTOs: Array<TherapyDTO>;
}

export interface GetTherapiesUsingPOSTRequest {
    thRowDTOs: Array<TherapyRowDTO>;
}

export interface GetTherapyRowsUsingGETRequest {
    codePatient: number;
}

export interface GetTherapyUsingPOSTRequest {
    thRowDTO: TherapyRowDTO;
}

export interface NewTherapyUsingPOSTRequest {
    thRowDTO: TherapyRowDTO;
}

export interface ReplaceTherapiesUsingPOSTRequest {
    thRowDTOs: Array<TherapyRowDTO>;
}

/**
 * no description
 */
export class TherapyControllerApi extends BaseAPI {

    /**
     * deleteAllTherapies
     */
    deleteAllTherapiesUsingDELETE = ({ codePatient }: DeleteAllTherapiesUsingDELETERequest): Observable<boolean> => {
        throwIfNullOrUndefined(codePatient, 'deleteAllTherapiesUsingDELETE');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            path: '/therapies/{code_patient}'.replace('{code_patient}', encodeURI(codePatient)),
            method: 'DELETE',
            headers,
        });
    };

    /**
     * getMedicalsOutOfStock
     */
    getMedicalsOutOfStockUsingPOST = ({ therapyDTOs }: GetMedicalsOutOfStockUsingPOSTRequest): Observable<Array<MedicalDTO>> => {
        throwIfNullOrUndefined(therapyDTOs, 'getMedicalsOutOfStockUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<MedicalDTO>>({
            path: '/therapies/meds-out-of-stock',
            method: 'POST',
            headers,
            body: therapyDTOs,
        });
    };

    /**
     * getTherapies
     */
    getTherapiesUsingPOST = ({ thRowDTOs }: GetTherapiesUsingPOSTRequest): Observable<Array<TherapyDTO>> => {
        throwIfNullOrUndefined(thRowDTOs, 'getTherapiesUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<TherapyDTO>>({
            path: '/therapies/from-rows',
            method: 'POST',
            headers,
            body: thRowDTOs,
        });
    };

    /**
     * getTherapyRows
     */
    getTherapyRowsUsingGET = ({ codePatient }: GetTherapyRowsUsingGETRequest): Observable<Array<TherapyRowDTO>> => {
        throwIfNullOrUndefined(codePatient, 'getTherapyRowsUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<TherapyRowDTO>>({
            path: '/therapies/{code_patient}'.replace('{code_patient}', encodeURI(codePatient)),
            method: 'GET',
            headers,
        });
    };

    /**
     * getTherapy
     */
    getTherapyUsingPOST = ({ thRowDTO }: GetTherapyUsingPOSTRequest): Observable<TherapyDTO> => {
        throwIfNullOrUndefined(thRowDTO, 'getTherapyUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<TherapyDTO>({
            path: '/therapies/from-row',
            method: 'POST',
            headers,
            body: thRowDTO,
        });
    };

    /**
     * newTherapy
     */
    newTherapyUsingPOST = ({ thRowDTO }: NewTherapyUsingPOSTRequest): Observable<TherapyRowDTO> => {
        throwIfNullOrUndefined(thRowDTO, 'newTherapyUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<TherapyRowDTO>({
            path: '/therapies',
            method: 'POST',
            headers,
            body: thRowDTO,
        });
    };

    /**
     * replaceTherapies
     */
    replaceTherapiesUsingPOST = ({ thRowDTOs }: ReplaceTherapiesUsingPOSTRequest): Observable<boolean> => {
        throwIfNullOrUndefined(thRowDTOs, 'replaceTherapiesUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            path: '/therapies/replace',
            method: 'POST',
            headers,
            body: thRowDTOs,
        });
    };

}
